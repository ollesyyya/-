def quick_sort(arr):
    """
    Функция быстрой сортировки
    """
    # Базовый случай: если массив содержит 1 элемент или меньше, он уже отсортирован
    if len(arr) <= 1:
        return arr
    
    # Выбираем опорный элемент (последний элемент массива)
    pivot = arr[-1]
    
    # Создаем три списка: для элементов меньше опорного, равных ему и больших
    left = []    # Элементы меньше опорного
    middle = []  # Элементы равные опорному  
    right = []   # Элементы больше опорного
    
    # Распределяем элементы по трем спискам
    for x in arr:
        if x < pivot:
            left.append(x)      # Добавляем в левую часть
        elif x == pivot:
            middle.append(x)    # Добавляем в среднюю часть
        else:
            right.append(x)     # Добавляем в правую часть
    
    # Рекурсивно сортируем левую и правую части, затем объединяем
    return quick_sort(left) + middle + quick_sort(right)

# Пример использования
if __name__ == "__main__":
    # Тестовый массив
    test_array = [64, 34, 25, 12, 22, 11, 90]
    print("Исходный массив:", test_array)
    
    # Вызываем функцию сортировки
    sorted_array = quick_sort(test_array)
    
    print("Отсортированный массив:", sorted_array)
    
def bubble_sort(arr):
    """
    Функция сортировки пузырьком
    """
    n = len(arr)
    
    # Проходим по всем элементам массива
    for i in range(n - 1):
        # Флаг для оптимизации - если не было обменов, массив отсортирован
        swapped = False
        
        # Последние i элементов уже на своих местах
        for j in range(0, n - i - 1):
            # Сравниваем соседние элементы
            if arr[j] > arr[j + 1]:
                # Если порядок неправильный, меняем местами
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                swapped = True  # Устанавливаем флаг обмена
        
        # Если не было обменов, массив отсортирован - выходим
        if not swapped:
            break

# Пример использования
if name == "main":
    # Тестовый массив
    test_array = [64, 34, 25, 12, 22, 11, 90]
    print("Исходный массив:", test_array)
    
    # Вызываем функцию сортировки
    bubble_sort(test_array)
    
    print("Отсортированный массив:", test_array)

def insertion_sort(array):
    """
    Функция сортировки вставками
    """
    # Начинаем со второго элемента (индекс 1)
    for i in range(1, len(array)):
        # Сохраняем текущий элемент для вставки
        key = array[i]
        
        # Начинаем сравнение с предыдущим элементом
        j = i - 1
        
        # Перемещаем элементы, которые больше key, вправо
        while j >= 0 and array[j] > key:
            # Сдвигаем элемент вправо
            array[j + 1] = array[j]
            # Переходим к следующему элементу слева
            j = j - 1
        
        # Вставляем key на правильную позицию
        array[j + 1] = key

# Пример использования
if name == "main":
    # Тестовый массив
    array = [12, 11, 13, 5, 6]
    print("Исходный массив:", array)
    
    # Вызываем функцию сортировки
    insertion_sort(array)
    
    print("Отсортированный массив:", array)
